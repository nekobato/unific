###

  StreamEvent.coffee

###

module.exports.StreamEvent = (app) ->

  async  = require 'async'
  RSS    = require 'rss'
  _      = require 'underscore'
  url    = require 'url'
  debug  = require('debug')('events/stream')

  Stream = app.get("models").Stream
  Feed   = app.get("models").Feed
  Page   = app.get("models").Page

  HelperEvent = app.models('events').HelperEvent app


  # HTTP EndPoint - Stream
  index: (req,res,next) ->
    title = req.params.stream
    Stream.findByTitle title,(err,stream)->
      if err
        debug(err)
        return res.send 400,'Internal Server Error'

      if stream?
        return render(res,stream)

      else
        Stream.create
          title:title
          description:'description (click to edit)'
        ,(err,stream)->
          return render(res,stream)

  # HTTP Endpoint - RSS
  rss  : (req,res,next) ->
    title = req.params.stream
    Stream.findByTitle title,(err,stream)->
      if err
        debug(err)
        return res.send 400,'Internal Server Error'

      feed = new RSS
        title: "#{streamname} - Unific"
        description: "Generated By Unific"
        feed_url: "http://unific.net/#{streamname}/rss"
        site_url: "http://unific.net/#{streamname}"
        author: "Unific"
        webMaster: "Unific"
        copyright: "2014 unific.net"
        pubDate: articles[0].page.pubDate

      stream.getLatestArticles (err,articles)->
        if err
          debug err
          res.send 400, 'Internal Server Error'

        for article in articles
          feed.item
            title: article.page.title
            description: article.page.description
            url: article.page.url
            author: article.feed.title # optional - defaults to feed author property
            date: article.page.pubDate

        xml = feed.xml()
        res.set
          "Content-Type": "text/xml"
        res.send xml

  ###
  # socket.io events
  ###
  getFeedList: (socket,data) ->
    streamName = decodeURIComponent data.stream
    Stream.findOne title:streamName,(err,stream)->
      if err
        debug err
        return HelperEvent.error err,socket
      stream.getSubscribedFeedList (err,feeds)->
        if err
          debug err
          return HelperEvent.error err,socket
        socket.emit 'feedList', feeds


  changeDesc: (socket,data) ->
    streamName = decodeURIComponent data.stream
    Stream.findOne title:streamName, (err,stream)->
      if err
        debug err
        return HelperEvent.error error,socket
      stream.description = data.text
      stream.save()
      socket.broadcast.to(data.stream).emit 'descChanged',
        text:data.text

###
# Private Methods
###
render = (res,stream)->
  res.render 'stream',
    stream:stream
