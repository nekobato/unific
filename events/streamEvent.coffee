###

  StreamEvent.coffee

###

module.exports.StreamEvent = (app) ->

  async  = require 'async'
  RSS    = require 'rss'
  _      = require 'underscore'
  url    = require 'url'
  debug  = require('debug')('events/stream')

  Stream = app.get("models").Stream
  Feed   = app.get("models").Feed
  Page   = app.get("models").Page
  Subscribe   = app.get('models').Subscribe

  HelperEvent = app.get('events').HelperEvent app

  # HTTP EndPoint - Stream
  index: (req,res,next) ->
    title = req.params.stream
    Stream.findByTitle title,(err,stream)->
      if err
        debug(err)
        return res.send 400,'Internal Server Error'

      if stream?
        return render(res,stream)

      else
        Stream.create
          title:title
          description:'description (click to edit)'
        ,(err,stream)->
          return render(res,stream)

  # HTTP Endpoint - RSS
  rss  : (req,res,next) ->
    title = req.params.stream
    HelperEvent.getPagesByStreamWithLimit title,100,(err,pages)->
      return HelperEvent.httpError err,res if err
      return res.send 404,"Articles Not Found" if pages is null

      feed = new RSS
        title: "#{title} - Unific"
        description: "Generated By Unific"
        feed_url: "http://unific.net/#{title}/rss"
        site_url: "http://unific.net/#{title}"
        author: "Unific"
        webMaster: "Unific"
        copyright: "2014 unific.net"
        pubDate: pages[0].pubDate


        for page in pages
          feed.item
            title: page.title
            description:page.description
            url: page.url
            author: page.feed.title # optional - defaults to feed author property
            date: page.pubDate

        xml = feed.xml()
        res.set
          "Content-Type": "text/xml"
        res.send xml

  ###
  # socket.io events
  ###
  subscribeFeed:(socket,data)->
    streamName = decodeURIComponent data.stream
    Stream.findOne title:streamName,(err,stream)->
      return HelperEvent.error err,socket if err or not stream
      data.stream = stream

      Feed.findOneAndUpdate
        feedUrl   : data.feed.url
      ,
        title     : data.feed.title
        feedUrl   : data.feed.url
        favicon   : data.feed.favicon
        siteUrl   : data.feed.link or data.feed.url.split(data.feed.href)[0]# @todo find-Rss
      , upsert    : true ,(err,feed)->
        return HelperEvent.error(err,socket) if err or not feed

        stream.feeds.push feed._id
        stream.save()

        # データ更新&watcher
        # @todo ここらへんかなり密になっててやばい
        crowler     = app.get('crowler')
        crowler.add feed
        return socket.emit 'subscribedFeed'

  getFeedList: (socket,data) ->
    streamName = decodeURIComponent data.stream
    Stream.findOne title:streamName,(err,stream)->
      if err
        debug err
        return HelperEvent.error err,socket
      stream.getSubscribedFeedList (err,feeds)->
        if err
          debug err
          return HelperEvent.error err,socket
        socket.emit 'feedList', feeds


  changeDesc: (socket,data) ->
    streamName = decodeURIComponent data.stream
    Stream.findOne title:streamName, (err,stream)->
      if err
        debug err
        return HelperEvent.error error,socket
      stream.description = data.text
      stream.save()
      socket.broadcast.to(data.stream).emit 'descChanged',
        text:data.text

###
# Private Methods
###
render = (res,stream)->
  res.render 'stream',
    stream:stream
